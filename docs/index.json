[{"content":"When running Ubuntu inside an LXC container, it\u0026rsquo;s important to keep the system up-to-date with security patches and updates. Additionally, if you are running Docker containers inside your LXC environment, those need regular updates as well. This guide covers automating updates using unattended-upgrades for the LXC container and watchtower for Docker containers.\n1. Keeping Ubuntu Updated with Unattended-Upgrades Installing Unattended-Upgrades First, ensure that unattended-upgrades is installed on your LXC container:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y sudo apt install unattended-upgrades -y Configuring Unattended-Upgrades Edit the configuration file at /etc/apt/apt.conf.d/50unattended-upgrades:\nsudo vi /etc/apt/apt.conf.d/50unattended-upgrades Ensure the following settings are enabled:\nUnattended-Upgrade::Allowed-Origins { \u0026#34;${distro_id}:${distro_codename}-security\u0026#34;; \u0026#34;${distro_id}:${distro_codename}-updates\u0026#34;; }; Unattended-Upgrade::Automatic-Reboot \u0026#34;true\u0026#34;; Unattended-Upgrade::Automatic-Reboot-Time \u0026#34;02:00\u0026#34;; This configuration ensures security and general updates are installed automatically and the system reboots if necessary at 2 AM.\nEnabling Unattended-Upgrades Enable the service to run automatically:\nsudo systemctl start unattended-upgrades sudo systemctl enable unattended-upgrades This command enables automatic updates.\nRunning Unattended-Upgrades on a Schedule To run updates at specific intervals, add a cron job:\nsudo crontab -e Add the following line at the end of the file to run updates every day at midnight:\n0 0 * * * /usr/bin/unattended-upgrade -d 2. Keeping Docker Containers Updated with Watchtower Watchtower is a Docker container that automatically updates running containers when new images become available.\nIf you are using Docker Compose, add the following to your docker-compose.yml:\nservices: watchtower: image: containrrr/watchtower container_name: watchtower restart: unless-stopped volumes: - /var/run/docker.sock:/var/run/docker.sock command: --schedule \u0026#34;0 0 * * *\u0026#34; This configuration:\nUses the official containrrr/watchtower image Mounts the Docker socket to manage containers Runs Watchtower daily at midnight to check for updates Running Watchtower Deploy Watchtower with:\ndocker compose up -d Conclusion By setting up unattended-upgrades and watchtower, your LXC containers and Docker workloads will always stay updated, reducing security risks and ensuring you’re running the latest versions of your software automatically.\n","permalink":"/articles/keeping-lxc-containers-and-docker-containers-up-to-date/","summary":"\u003cp\u003eWhen running Ubuntu inside an LXC container, it\u0026rsquo;s important to keep the system up-to-date with security patches and updates. Additionally, if you are running Docker containers inside your LXC environment, those need regular updates as well. This guide covers automating updates using \u003ccode\u003eunattended-upgrades\u003c/code\u003e for the LXC container and \u003ccode\u003ewatchtower\u003c/code\u003e for Docker containers.\u003c/p\u003e\n\u003ch2 id=\"1-keeping-ubuntu-updated-with-unattended-upgrades\"\u003e1. Keeping Ubuntu Updated with Unattended-Upgrades\u003c/h2\u003e\n\u003ch3 id=\"installing-unattended-upgrades\"\u003eInstalling Unattended-Upgrades\u003c/h3\u003e\n\u003cp\u003eFirst, ensure that \u003ccode\u003eunattended-upgrades\u003c/code\u003e is installed on your LXC container:\u003c/p\u003e","title":"Keeping LXC containers with docker containers up-to-date"},{"content":"Managing pantry inventory can be a daunting task, often leading to overstocking or running out of essential items. To address this challenge, I developed the Kanban Card Generator, a Python-powered tool designed to streamline pantry management by generating QR-enhanced Kanban cards.\nProject overview Inspired by the Kanban system—a scheduling method widely used in just-in-time (JIT) manufacturing—I adapted its principles for personal pantry management. The core idea is to create visual cues that signal when it\u0026rsquo;s time to replenish specific items, thereby maintaining optimal stock levels.\nThe Kanban Card Generator produces business card-sized labels containing essential product information:\nProduct Type: The category or name of the item Manufacturer: The brand or producer of the item Store of Purchase: Where the item is typically bought Kanban Levels: Indicators that help determine when to reorder Reorder Quantity: The amount to purchase when restocking A prominent feature of each card is a QR code, generated using the Segno library. This QR code integrates seamlessly with a custom macOS and iOS Shortcut, allowing for quick addition of items to a designated list, such as a grocery list.\nKey features Python-Powered: Utilizes Python for efficient data processing and card generation. QR Code Integration: Generates QR codes for swift item logging via mobile devices. Customizable Templates: Allows for personalization of card design to suit individual preferences. Cross-Platform Compatibility: Works seamlessly with macOS and iOS Shortcuts for enhanced usability. Getting started To setup the Kanban Card Generator:\nPrerequisite: you have the macOS/iOS Shortcut \u0026ldquo;AddToList\u0026rdquo; installed.\nClone the Repository:\n$ git clone https://github.com/claesto/kanban-card-generator.git $ cd kanban-card-generator Activate the Python virtual environment:\n$ python -m venv venv $ venv/bin/python venv/bin/activate Install Dependencies: Ensure you have Python installed, then install the required libraries:\n$ venv/bin/python -m pip install -r requirements.txt Configure Your Data: Customize the kanbancard.py script with your inventory details, including product names, manufacturers, stores, Kanban levels, and reorder quantities.\nGenerate Kanban Cards: Run the script to generate your personalized Kanban cards:\nvenv/bin/python kanbancard.py Print and Use: Print the generated cards and attach them to your pantry items. Use the QR codes with the macOS and iOS Shortcut to manage your inventory efficiently.\nIf all went as expected, if you scan the QR code for a specific item, this item should be added to your Reminders list of choice.\nFuture enhancements Right now I\u0026rsquo;m not really looking for specific enhancements. I don\u0026rsquo;t have to manage a large inventory, this is after all to make managing our pantry/storage a bit easier. However feel free to iterate on the code, it\u0026rsquo;s available under the Unlicense license.\nSome ideas:\nDatabase integration: Implementing a database to manage larger inventories Enhanced customization/templates: Offering more design options for the generated kanban cards Mobile application: specifically tailored to inventory/stock management Contributions and feedback are welcome! Feel free to fork the repository, submit pull requests, or open issues on GitHub.\nBy leveraging this tool, you can transform your pantry management into a streamlined, efficient process, ensuring you always have the essentials on hand without overstocking.\n","permalink":"/articles/python-kanban-card-generator/","summary":"\u003cp\u003eManaging pantry inventory can be a daunting task, often leading to overstocking or running out of essential items. To address this challenge, I developed the \u003ca href=\"https://github.com/claesto/kanban-card-generator\"\u003eKanban Card Generator\u003c/a\u003e, a Python-powered tool designed to streamline pantry management by generating QR-enhanced Kanban cards.\u003c/p\u003e\n\u003ch2 id=\"project-overview\"\u003eProject overview\u003c/h2\u003e\n\u003cp\u003eInspired by the Kanban system—a scheduling method widely used in just-in-time (JIT) manufacturing—I adapted its principles for personal pantry management. The core idea is to create visual cues that signal when it\u0026rsquo;s time to replenish specific items, thereby maintaining optimal stock levels.\u003c/p\u003e","title":"Python kanban card generator"},{"content":"My parents travelled with me to the picturesque landscapes of the South of France and the high Alps. The golden sun kissed lavender fields, the azure waters of the Mediterranean and the highest snow covered mountain peaks of Europe seemed to stretch infinitely, capturing my imagination and igniting a lifelong love for the great outdoors.\nDays spent hiking along rugged trails, breathing in the clean air and absorbing the breathtaking beauty of nature left a mark on my soul. Every moment felt like a canvas waiting to be painted, an emotion waiting to be captured.\nYears later I discovered the art of photography. It was as if all those memories flooded back, urging me to pick up a camera and attempt to freeze those fleeting moments in time. I quickly realised that my passion for the outdoors and my newfound love for photography were destined to intertwine.\nWith each shutter release I strive to encapsulate the same sense of wonder I experience in the field. Through my lens I aim to share the untamed beauty of landscapes, the play of light and shadow, and. the raw emotions that nature evokes. Every photograph is a testament to the connection between my love for exploration and my passion for photography, bridging the gap between what can be seen and what can be felt.\n","permalink":"/about/","summary":"\u003cp\u003eMy parents travelled with me to the picturesque landscapes of the South of France and the high Alps. The golden sun kissed lavender fields, the azure waters of the Mediterranean and the highest snow covered mountain peaks of Europe seemed to stretch infinitely, capturing my imagination and igniting a lifelong love for the great outdoors.\u003c/p\u003e\n\u003cp\u003eDays spent hiking along rugged trails, breathing in the clean air and absorbing the breathtaking beauty of nature left a mark on my soul. Every moment felt like a canvas waiting to be painted, an emotion waiting to be captured.\u003c/p\u003e","title":"About"}]