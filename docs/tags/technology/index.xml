<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Technology on claesto</title>
    <link>/tags/technology/</link>
    <description>Recent content in Technology on claesto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keeping LXC containers with docker containers up-to-date</title>
      <link>/articles/keeping-lxc-containers-and-docker-containers-up-to-date/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/articles/keeping-lxc-containers-and-docker-containers-up-to-date/</guid>
      <description>How to automatically update Ubuntu LXC containers with unattended-upgrades and keep Docker containers up-to-date using Watchtower for better security</description>
      <content:encoded><![CDATA[<p>When running Ubuntu inside an LXC container, it&rsquo;s important to keep the system up-to-date with security patches and updates. Additionally, if you are running Docker containers inside your LXC environment, those need regular updates as well. This guide covers automating updates using <code>unattended-upgrades</code> for the LXC container and <code>watchtower</code> for Docker containers.</p>
<h2 id="1-keeping-ubuntu-updated-with-unattended-upgrades">1. Keeping Ubuntu Updated with Unattended-Upgrades</h2>
<h3 id="installing-unattended-upgrades">Installing Unattended-Upgrades</h3>
<p>First, ensure that <code>unattended-upgrades</code> is installed on your LXC container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> sudo apt upgrade -y
</span></span><span style="display:flex;"><span>sudo apt install unattended-upgrades -y
</span></span></code></pre></div><h2 id="configuring-unattended-upgrades">Configuring Unattended-Upgrades</h2>
<p>Edit the configuration file at <code>/etc/apt/apt.conf.d/50unattended-upgrades</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo vi /etc/apt/apt.conf.d/50unattended-upgrades
</span></span></code></pre></div><p>Ensure the following settings are enabled:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Unattended-Upgrade::Allowed-Origins <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>distro_id<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">${</span>distro_codename<span style="color:#e6db74">}</span><span style="color:#e6db74">-security&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>distro_id<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">${</span>distro_codename<span style="color:#e6db74">}</span><span style="color:#e6db74">-updates&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>;
</span></span><span style="display:flex;"><span>Unattended-Upgrade::Automatic-Reboot <span style="color:#e6db74">&#34;true&#34;</span>;
</span></span><span style="display:flex;"><span>Unattended-Upgrade::Automatic-Reboot-Time <span style="color:#e6db74">&#34;02:00&#34;</span>;
</span></span></code></pre></div><p>This configuration ensures security and general updates are installed automatically and the system reboots if necessary at 2 AM.</p>
<h3 id="enabling-unattended-upgrades">Enabling Unattended-Upgrades</h3>
<p>Enable the service to run automatically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl start unattended-upgrades
</span></span><span style="display:flex;"><span>sudo systemctl enable unattended-upgrades
</span></span></code></pre></div><p>This command enables automatic updates.</p>
<h3 id="running-unattended-upgrades-on-a-schedule">Running Unattended-Upgrades on a Schedule</h3>
<p>To run updates at specific intervals, add a cron job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo crontab -e
</span></span></code></pre></div><p>Add the following line at the end of the file to run updates every day at midnight:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> * * * /usr/bin/unattended-upgrade -d
</span></span></code></pre></div><h2 id="2-keeping-docker-containers-updated-with-watchtower">2. Keeping Docker Containers Updated with Watchtower</h2>
<p>Watchtower is a Docker container that automatically updates running containers when new images become available.</p>
<p>If you are using Docker Compose, add the following to your <code>docker-compose.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">watchtower</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containrrr/watchtower</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">watchtower</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: --<span style="color:#ae81ff">schedule &#34;0 0 * * *&#34;</span>
</span></span></code></pre></div><p>This configuration:</p>
<ul>
<li>Uses the official <code>containrrr/watchtower</code> image</li>
<li>Mounts the Docker socket to manage containers</li>
<li>Runs Watchtower daily at midnight to check for updates</li>
</ul>
<h3 id="running-watchtower">Running Watchtower</h3>
<p>Deploy Watchtower with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker compose up -d
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>By setting up <code>unattended-upgrades</code> and <code>watchtower</code>, your LXC containers and Docker workloads will always stay updated, reducing security risks and ensuring you’re running the latest versions of your software automatically.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python kanban card generator</title>
      <link>/articles/python-kanban-card-generator/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>/articles/python-kanban-card-generator/</guid>
      <description>Streamline your pantry management with the Kanban Card Generator, a Python-based tool for creating customizable QR-enabled Kanban cards.</description>
      <content:encoded><![CDATA[<p>Managing pantry inventory can be a daunting task, often leading to overstocking or running out of essential items. To address this challenge, I developed the <a href="https://github.com/claesto/kanban-card-generator">Kanban Card Generator</a>, a Python-powered tool designed to streamline pantry management by generating QR-enhanced Kanban cards.</p>
<h2 id="project-overview">Project overview</h2>
<p>Inspired by the Kanban system—a scheduling method widely used in just-in-time (JIT) manufacturing—I adapted its principles for personal pantry management. The core idea is to create visual cues that signal when it&rsquo;s time to replenish specific items, thereby maintaining optimal stock levels.</p>
<p>The Kanban Card Generator produces business card-sized labels containing essential product information:</p>
<ul>
<li><strong>Product Type</strong>: The category or name of the item</li>
<li><strong>Manufacturer</strong>: The brand or producer of the item</li>
<li><strong>Store of Purchase</strong>: Where the item is typically bought</li>
<li><strong>Kanban Levels</strong>: Indicators that help determine when to reorder</li>
<li><strong>Reorder Quantity</strong>: The amount to purchase when restocking</li>
</ul>
<p>A prominent feature of each card is a QR code, generated using the <a href="https://pypi.org/project/segno/">Segno library</a>. This QR code integrates seamlessly with a custom macOS and iOS Shortcut, allowing for quick addition of items to a designated list, such as a grocery list.</p>
<h2 id="key-features">Key features</h2>
<ul>
<li><strong>Python-Powered</strong>: Utilizes Python for efficient data processing and card generation.</li>
<li><strong>QR Code Integration</strong>: Generates QR codes for swift item logging via mobile devices.</li>
<li><strong>Customizable Templates</strong>: Allows for personalization of card design to suit individual preferences.</li>
<li><strong>Cross-Platform Compatibility</strong>: Works seamlessly with macOS and iOS Shortcuts for enhanced usability.</li>
</ul>
<h2 id="getting-started">Getting started</h2>
<p>To setup the Kanban Card Generator:</p>
<ol start="0">
<li>
<p>Prerequisite: you have the macOS/iOS Shortcut &ldquo;<a href="https://www.icloud.com/shortcuts/609528f7b75b441bb34834c92f07b175">AddToList</a>&rdquo; installed.</p>
</li>
<li>
<p><strong>Clone the Repository</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git clone https://github.com/claesto/kanban-card-generator.git
</span></span><span style="display:flex;"><span>$ cd kanban-card-generator
</span></span></code></pre></div></li>
<li>
<p>Activate the Python virtual environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ python -m venv venv
</span></span><span style="display:flex;"><span>$ venv/bin/python venv/bin/activate
</span></span></code></pre></div></li>
<li>
<p><strong>Install Dependencies</strong>: Ensure you have Python installed, then install the required libraries:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ venv/bin/python -m pip install -r requirements.txt
</span></span></code></pre></div></li>
<li>
<p><strong>Configure Your Data</strong>: Customize the kanbancard.py script with your inventory details, including product names, manufacturers, stores, Kanban levels, and reorder quantities.</p>
</li>
<li>
<p><strong>Generate Kanban Cards</strong>: Run the script to generate your personalized Kanban cards:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>venv/bin/python kanbancard.py
</span></span></code></pre></div></li>
<li>
<p><strong>Print and Use</strong>: Print the generated cards and attach them to your pantry items. Use the QR codes with the macOS and iOS Shortcut to manage your inventory efficiently.</p>
</li>
</ol>
<p>If all went as expected, if you scan the QR code for a specific item, this item should be added to your <a href="https://www.icloud.com/reminders/">Reminders</a> list of choice.</p>
<h2 id="future-enhancements">Future enhancements</h2>
<p>Right now I&rsquo;m not really looking for specific enhancements. I don&rsquo;t have to manage a large inventory, this is after all to make managing our pantry/storage a bit easier. However feel free to iterate on the code, it&rsquo;s available under the <strong>Unlicense</strong> license.</p>
<p>Some ideas:</p>
<ul>
<li><strong>Database integration</strong>: Implementing a database to manage larger inventories</li>
<li><strong>Enhanced customization/templates</strong>: Offering more design options for the generated kanban cards</li>
<li><strong>Mobile application</strong>: specifically tailored to inventory/stock management</li>
</ul>
<p>Contributions and feedback are welcome! Feel free to fork the repository, submit <a href="https://github.com/claesto/kanban-card-generator/pulls">pull requests</a>, or <a href="https://github.com/claesto/kanban-card-generator/issues">open issues</a> on GitHub.</p>
<p>By leveraging this tool, you can transform your pantry management into a streamlined, efficient process, ensuring you always have the essentials on hand without overstocking.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
